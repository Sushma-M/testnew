/*Copyright (c) 2017-2018 wmvcstest2.com All Rights Reserved.
 This software is the confidential and proprietary information of wmvcstest2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wmvcstest2.com*/
package com.testnew.cropdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testnew.cropdata.CropData;

/**
 * Service object for domain model class {@link CropData}.
 */
public interface CropDataService {

    /**
     * Creates a new CropData. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CropData if any.
     *
     * @param cropData Details of the CropData to be created; value cannot be null.
     * @return The newly created CropData.
     */
	CropData create(CropData cropData);


	/**
	 * Returns CropData by given id if exists.
	 *
	 * @param cropdataId The id of the CropData to get; value cannot be null.
	 * @return CropData associated with the given cropdataId.
     * @throws EntityNotFoundException If no CropData is found.
	 */
	CropData getById(Integer cropdataId) throws EntityNotFoundException;

    /**
	 * Find and return the CropData by given id if exists, returns null otherwise.
	 *
	 * @param cropdataId The id of the CropData to get; value cannot be null.
	 * @return CropData associated with the given cropdataId.
	 */
	CropData findById(Integer cropdataId);


	/**
	 * Updates the details of an existing CropData. It replaces all fields of the existing CropData with the given cropData.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on CropData if any.
     *
	 * @param cropData The details of the CropData to be updated; value cannot be null.
	 * @return The updated CropData.
	 * @throws EntityNotFoundException if no CropData is found with given input.
	 */
	CropData update(CropData cropData) throws EntityNotFoundException;

    /**
	 * Deletes an existing CropData with the given id.
	 *
	 * @param cropdataId The id of the CropData to be deleted; value cannot be null.
	 * @return The deleted CropData.
	 * @throws EntityNotFoundException if no CropData found with the given id.
	 */
	CropData delete(Integer cropdataId) throws EntityNotFoundException;

	/**
	 * Find all CropDatas matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CropDatas.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<CropData> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all CropDatas matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CropDatas.
     *
     * @see Pageable
     * @see Page
	 */
    Page<CropData> findAll(String query, Pageable pageable);

    /**
	 * Exports all CropDatas matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the CropDatas in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the CropData.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}


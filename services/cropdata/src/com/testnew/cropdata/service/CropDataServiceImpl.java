/*Copyright (c) 2017-2018 wmvcstest2.com All Rights Reserved.
 This software is the confidential and proprietary information of wmvcstest2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wmvcstest2.com*/
package com.testnew.cropdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testnew.cropdata.CropData;


/**
 * ServiceImpl object for domain model class CropData.
 *
 * @see CropData
 */
@Service("cropdata.CropDataService")
public class CropDataServiceImpl implements CropDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CropDataServiceImpl.class);


    @Autowired
    @Qualifier("cropdata.CropDataDao")
    private WMGenericDao<CropData, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CropData, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cropdataTransactionManager")
    @Override
	public CropData create(CropData cropData) {
        LOGGER.debug("Creating a new CropData with information: {}", cropData);
        CropData cropDataCreated = this.wmGenericDao.create(cropData);
        return cropDataCreated;
    }

	@Transactional(readOnly = true, value = "cropdataTransactionManager")
	@Override
	public CropData getById(Integer cropdataId) throws EntityNotFoundException {
        LOGGER.debug("Finding CropData by id: {}", cropdataId);
        CropData cropData = this.wmGenericDao.findById(cropdataId);
        if (cropData == null){
            LOGGER.debug("No CropData found with id: {}", cropdataId);
            throw new EntityNotFoundException(String.valueOf(cropdataId));
        }
        return cropData;
    }

    @Transactional(readOnly = true, value = "cropdataTransactionManager")
	@Override
	public CropData findById(Integer cropdataId) {
        LOGGER.debug("Finding CropData by id: {}", cropdataId);
        return this.wmGenericDao.findById(cropdataId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cropdataTransactionManager")
	@Override
	public CropData update(CropData cropData) throws EntityNotFoundException {
        LOGGER.debug("Updating CropData with information: {}", cropData);
        this.wmGenericDao.update(cropData);

        Integer cropdataId = cropData.getId();

        return this.wmGenericDao.findById(cropdataId);
    }

    @Transactional(value = "cropdataTransactionManager")
	@Override
	public CropData delete(Integer cropdataId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CropData with id: {}", cropdataId);
        CropData deleted = this.wmGenericDao.findById(cropdataId);
        if (deleted == null) {
            LOGGER.debug("No CropData found with id: {}", cropdataId);
            throw new EntityNotFoundException(String.valueOf(cropdataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cropdataTransactionManager")
	@Override
	public Page<CropData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CropDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cropdataTransactionManager")
    @Override
    public Page<CropData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CropDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cropdataTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cropdata for table CropData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cropdataTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cropdataTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

